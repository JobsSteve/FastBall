using UnityEngine;
using UnityEngine.UI;

public static class Game
{
    public static uint Points = 0;

    public static int DifficultyLevel
    { 
        get
        {
            return difficultyLevel;
        }
        set
        {
            difficultyLevel = value;

            switch (value)
            {
                case 1: difficulty = 1.60f; break;
                case 2: difficulty = 1.33f; break;
                case 3: difficulty = 1.10f; break;
            }
        }
    }

    public static float TimeLimit
    {
        get
        {
            return PointsTable[Level] * difficulty;
        }
    }

    public static int Level { get; private set; }
    public static bool AutoGenerated { get; private set; }
    public static bool Paused { get; private set; }

	private static readonly ushort[] PointsTable = {14,
                                            27,
                                            36,
                                            33,
                                            20 };

    private static float[] TimeTable;
    private static uint maxPoints;
    private static float difficulty = 1.33f;
    private static int difficultyLevel = 2;

    public static void NewGame()
    {
        Level = 0;
        LoadGame();
    }

    public static void SetButtonState(string path, bool value)
    {
        Image img = GameObject.Find(path).GetComponent<Image>();
        img.color = (value) ? Color.white : Color.black;

        Button but = GameObject.Find(path).GetComponent<Button>();
        but.interactable = value;

        Text txt = GameObject.Find(path + "/Text").GetComponent<Text>();
        txt.color = (value) ? Color.white : Color.black;
    }

    public static void LoadGame()
    {
        AutoGenerated = false;
        InputSettings.AutoCalibrate();
        LoadLevel();
    }

    public static void LevelCompleted()
    {
        Level++;
    }

    public static void LoadLevel()
    {
        Game.Points = 0;
        Application.LoadLevel("Level_" + (Level + 1));
    }

    public static void GenerateGame()
    {
        Game.Points = 0;

        AutoGenerated = true;
        InputSettings.AutoCalibrate();
        Application.LoadLevel("GeneratedScene");
    }

    public static void RetryLevel()
    {
        RetryLevel(Application.loadedLevelName);
    }

    public static void RetryLevel(string prevlevel)
    {
        Game.Points = 0;

        if (AutoGenerated)
        {
            //?
        }
        else
        {
            Application.LoadLevel(prevlevel);
        }
    }

    public static void LoadData()
    {
        Level = PlayerPrefs.GetInt("Level", 0);
        DifficultyLevel = PlayerPrefs.GetInt("Difficulty", 2);
        SettingsMenu.SoundEnabled = (PlayerPrefs.GetInt("SoundEnabled", 0) == 1);

        InputSettings.LoadData();
    }

    public static uint MaxPoints
    {
        get
        {
            return AutoGenerated ? maxPoints : PointsTable[Level];
        }
        set
        {
            AutoGenerated = true;

            maxPoints = value;
            Points = 0;
        }
    }

    public static void CheckPoints()
    {
        if (Points == MaxPoints)
        {
            CompletedMenu.Time = Time.timeSinceLevelLoad;

            if (!AutoGenerated)
            {
                if (Level + 1 == PointsTable.Length)
                {
                    CompletedMenu.LastLevel = true;
                }
                else
                {
                    PlayerPrefs.SetInt("Level", Level + 1);
                    PlayerPrefs.Save();
                }
            }

            Application.LoadLevel("CompletedScene");
        }
    }
}
